// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/go-dpkg/domain"
)

// DHT is an autogenerated mock type for the DHT type
type DHT struct {
	mock.Mock
}

type DHT_Expecter struct {
	mock *mock.Mock
}

func (_m *DHT) EXPECT() *DHT_Expecter {
	return &DHT_Expecter{mock: &_m.Mock}
}

// AddOrUpdateNode provides a mock function with given fields: ctx, key, value
func (_m *DHT) AddOrUpdateNode(ctx context.Context, key []byte, value []byte) {
	_m.Called(ctx, key, value)
}

// DHT_AddOrUpdateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdateNode'
type DHT_AddOrUpdateNode_Call struct {
	*mock.Call
}

// AddOrUpdateNode is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
//   - value []byte
func (_e *DHT_Expecter) AddOrUpdateNode(ctx interface{}, key interface{}, value interface{}) *DHT_AddOrUpdateNode_Call {
	return &DHT_AddOrUpdateNode_Call{Call: _e.mock.On("AddOrUpdateNode", ctx, key, value)}
}

func (_c *DHT_AddOrUpdateNode_Call) Run(run func(ctx context.Context, key []byte, value []byte)) *DHT_AddOrUpdateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *DHT_AddOrUpdateNode_Call) Return() *DHT_AddOrUpdateNode_Call {
	_c.Call.Return()
	return _c
}

func (_c *DHT_AddOrUpdateNode_Call) RunAndReturn(run func(context.Context, []byte, []byte)) *DHT_AddOrUpdateNode_Call {
	_c.Call.Return(run)
	return _c
}

// AddOrUpdateRoutingTable provides a mock function with given fields: ctx, c
func (_m *DHT) AddOrUpdateRoutingTable(ctx context.Context, c *domain.Contact) {
	_m.Called(ctx, c)
}

// DHT_AddOrUpdateRoutingTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdateRoutingTable'
type DHT_AddOrUpdateRoutingTable_Call struct {
	*mock.Call
}

// AddOrUpdateRoutingTable is a helper method to define mock.On call
//   - ctx context.Context
//   - c *domain.Contact
func (_e *DHT_Expecter) AddOrUpdateRoutingTable(ctx interface{}, c interface{}) *DHT_AddOrUpdateRoutingTable_Call {
	return &DHT_AddOrUpdateRoutingTable_Call{Call: _e.mock.On("AddOrUpdateRoutingTable", ctx, c)}
}

func (_c *DHT_AddOrUpdateRoutingTable_Call) Run(run func(ctx context.Context, c *domain.Contact)) *DHT_AddOrUpdateRoutingTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Contact))
	})
	return _c
}

func (_c *DHT_AddOrUpdateRoutingTable_Call) Return() *DHT_AddOrUpdateRoutingTable_Call {
	_c.Call.Return()
	return _c
}

func (_c *DHT_AddOrUpdateRoutingTable_Call) RunAndReturn(run func(context.Context, *domain.Contact)) *DHT_AddOrUpdateRoutingTable_Call {
	_c.Call.Return(run)
	return _c
}

// FindClosestNodes provides a mock function with given fields: ctx, key, nodeID
func (_m *DHT) FindClosestNodes(ctx context.Context, key []byte, nodeID domain.NodeID224) []string {
	ret := _m.Called(ctx, key, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for FindClosestNodes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, []byte, domain.NodeID224) []string); ok {
		r0 = rf(ctx, key, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DHT_FindClosestNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindClosestNodes'
type DHT_FindClosestNodes_Call struct {
	*mock.Call
}

// FindClosestNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
//   - nodeID domain.NodeID224
func (_e *DHT_Expecter) FindClosestNodes(ctx interface{}, key interface{}, nodeID interface{}) *DHT_FindClosestNodes_Call {
	return &DHT_FindClosestNodes_Call{Call: _e.mock.On("FindClosestNodes", ctx, key, nodeID)}
}

func (_c *DHT_FindClosestNodes_Call) Run(run func(ctx context.Context, key []byte, nodeID domain.NodeID224)) *DHT_FindClosestNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(domain.NodeID224))
	})
	return _c
}

func (_c *DHT_FindClosestNodes_Call) Return(_a0 []string) *DHT_FindClosestNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DHT_FindClosestNodes_Call) RunAndReturn(run func(context.Context, []byte, domain.NodeID224) []string) *DHT_FindClosestNodes_Call {
	_c.Call.Return(run)
	return _c
}

// FindKClosestBuckets provides a mock function with given fields: ctx, key
func (_m *DHT) FindKClosestBuckets(ctx context.Context, key []byte) []domain.NodeID224 {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for FindKClosestBuckets")
	}

	var r0 []domain.NodeID224
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []domain.NodeID224); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NodeID224)
		}
	}

	return r0
}

// DHT_FindKClosestBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindKClosestBuckets'
type DHT_FindKClosestBuckets_Call struct {
	*mock.Call
}

// FindKClosestBuckets is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
func (_e *DHT_Expecter) FindKClosestBuckets(ctx interface{}, key interface{}) *DHT_FindKClosestBuckets_Call {
	return &DHT_FindKClosestBuckets_Call{Call: _e.mock.On("FindKClosestBuckets", ctx, key)}
}

func (_c *DHT_FindKClosestBuckets_Call) Run(run func(ctx context.Context, key []byte)) *DHT_FindKClosestBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *DHT_FindKClosestBuckets_Call) Return(_a0 []domain.NodeID224) *DHT_FindKClosestBuckets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DHT_FindKClosestBuckets_Call) RunAndReturn(run func(context.Context, []byte) []domain.NodeID224) *DHT_FindKClosestBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *DHT) Get(ctx context.Context, key []byte) *domain.Bucket {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *domain.Bucket); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bucket)
		}
	}

	return r0
}

// DHT_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DHT_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
func (_e *DHT_Expecter) Get(ctx interface{}, key interface{}) *DHT_Get_Call {
	return &DHT_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *DHT_Get_Call) Run(run func(ctx context.Context, key []byte)) *DHT_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *DHT_Get_Call) Return(_a0 *domain.Bucket) *DHT_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DHT_Get_Call) RunAndReturn(run func(context.Context, []byte) *domain.Bucket) *DHT_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewDHT creates a new instance of DHT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDHT(t interface {
	mock.TestingT
	Cleanup(func())
}) *DHT {
	mock := &DHT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
