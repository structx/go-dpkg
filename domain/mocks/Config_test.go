// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/go-pkg/domain"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// GetAccessControl provides a mock function with given fields:
func (_m *Config) GetAccessControl() *domain.AccessControl {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccessControl")
	}

	var r0 *domain.AccessControl
	if rf, ok := ret.Get(0).(func() *domain.AccessControl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccessControl)
		}
	}

	return r0
}

// Config_GetAccessControl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessControl'
type Config_GetAccessControl_Call struct {
	*mock.Call
}

// GetAccessControl is a helper method to define mock.On call
func (_e *Config_Expecter) GetAccessControl() *Config_GetAccessControl_Call {
	return &Config_GetAccessControl_Call{Call: _e.mock.On("GetAccessControl")}
}

func (_c *Config_GetAccessControl_Call) Run(run func()) *Config_GetAccessControl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetAccessControl_Call) Return(_a0 *domain.AccessControl) *Config_GetAccessControl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetAccessControl_Call) RunAndReturn(run func() *domain.AccessControl) *Config_GetAccessControl_Call {
	_c.Call.Return(run)
	return _c
}

// GetChain provides a mock function with given fields:
func (_m *Config) GetChain() *domain.Chain {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChain")
	}

	var r0 *domain.Chain
	if rf, ok := ret.Get(0).(func() *domain.Chain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chain)
		}
	}

	return r0
}

// Config_GetChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChain'
type Config_GetChain_Call struct {
	*mock.Call
}

// GetChain is a helper method to define mock.On call
func (_e *Config_Expecter) GetChain() *Config_GetChain_Call {
	return &Config_GetChain_Call{Call: _e.mock.On("GetChain")}
}

func (_c *Config_GetChain_Call) Run(run func()) *Config_GetChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetChain_Call) Return(_a0 *domain.Chain) *Config_GetChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetChain_Call) RunAndReturn(run func() *domain.Chain) *Config_GetChain_Call {
	_c.Call.Return(run)
	return _c
}

// GetDistributedHashTable provides a mock function with given fields:
func (_m *Config) GetDistributedHashTable() *domain.DistributedHashTable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDistributedHashTable")
	}

	var r0 *domain.DistributedHashTable
	if rf, ok := ret.Get(0).(func() *domain.DistributedHashTable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DistributedHashTable)
		}
	}

	return r0
}

// Config_GetDistributedHashTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistributedHashTable'
type Config_GetDistributedHashTable_Call struct {
	*mock.Call
}

// GetDistributedHashTable is a helper method to define mock.On call
func (_e *Config_Expecter) GetDistributedHashTable() *Config_GetDistributedHashTable_Call {
	return &Config_GetDistributedHashTable_Call{Call: _e.mock.On("GetDistributedHashTable")}
}

func (_c *Config_GetDistributedHashTable_Call) Run(run func()) *Config_GetDistributedHashTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetDistributedHashTable_Call) Return(_a0 *domain.DistributedHashTable) *Config_GetDistributedHashTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetDistributedHashTable_Call) RunAndReturn(run func() *domain.DistributedHashTable) *Config_GetDistributedHashTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogger provides a mock function with given fields:
func (_m *Config) GetLogger() domain.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 domain.Logger
	if rf, ok := ret.Get(0).(func() domain.Logger); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Logger)
	}

	return r0
}

// Config_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type Config_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *Config_Expecter) GetLogger() *Config_GetLogger_Call {
	return &Config_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *Config_GetLogger_Call) Run(run func()) *Config_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetLogger_Call) Return(_a0 domain.Logger) *Config_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetLogger_Call) RunAndReturn(run func() domain.Logger) *Config_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessenger provides a mock function with given fields:
func (_m *Config) GetMessenger() *domain.Messenger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessenger")
	}

	var r0 *domain.Messenger
	if rf, ok := ret.Get(0).(func() *domain.Messenger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Messenger)
		}
	}

	return r0
}

// Config_GetMessenger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessenger'
type Config_GetMessenger_Call struct {
	*mock.Call
}

// GetMessenger is a helper method to define mock.On call
func (_e *Config_Expecter) GetMessenger() *Config_GetMessenger_Call {
	return &Config_GetMessenger_Call{Call: _e.mock.On("GetMessenger")}
}

func (_c *Config_GetMessenger_Call) Run(run func()) *Config_GetMessenger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetMessenger_Call) Return(_a0 *domain.Messenger) *Config_GetMessenger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetMessenger_Call) RunAndReturn(run func() *domain.Messenger) *Config_GetMessenger_Call {
	_c.Call.Return(run)
	return _c
}

// GetRaft provides a mock function with given fields:
func (_m *Config) GetRaft() *domain.Raft {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRaft")
	}

	var r0 *domain.Raft
	if rf, ok := ret.Get(0).(func() *domain.Raft); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Raft)
		}
	}

	return r0
}

// Config_GetRaft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaft'
type Config_GetRaft_Call struct {
	*mock.Call
}

// GetRaft is a helper method to define mock.On call
func (_e *Config_Expecter) GetRaft() *Config_GetRaft_Call {
	return &Config_GetRaft_Call{Call: _e.mock.On("GetRaft")}
}

func (_c *Config_GetRaft_Call) Run(run func()) *Config_GetRaft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetRaft_Call) Return(_a0 *domain.Raft) *Config_GetRaft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetRaft_Call) RunAndReturn(run func() *domain.Raft) *Config_GetRaft_Call {
	_c.Call.Return(run)
	return _c
}

// GetServer provides a mock function with given fields:
func (_m *Config) GetServer() domain.Server {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 domain.Server
	if rf, ok := ret.Get(0).(func() domain.Server); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Server)
	}

	return r0
}

// Config_GetServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServer'
type Config_GetServer_Call struct {
	*mock.Call
}

// GetServer is a helper method to define mock.On call
func (_e *Config_Expecter) GetServer() *Config_GetServer_Call {
	return &Config_GetServer_Call{Call: _e.mock.On("GetServer")}
}

func (_c *Config_GetServer_Call) Run(run func()) *Config_GetServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_GetServer_Call) Return(_a0 domain.Server) *Config_GetServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_GetServer_Call) RunAndReturn(run func() domain.Server) *Config_GetServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
