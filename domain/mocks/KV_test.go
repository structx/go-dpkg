// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/go-dpkg/domain"
)

// KV is an autogenerated mock type for the KV type
type KV struct {
	mock.Mock
}

type KV_Expecter struct {
	mock *mock.Mock
}

func (_m *KV) EXPECT() *KV_Expecter {
	return &KV_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *KV) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KV_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type KV_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *KV_Expecter) Close() *KV_Close_Call {
	return &KV_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *KV_Close_Call) Run(run func()) *KV_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KV_Close_Call) Return(_a0 error) *KV_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KV_Close_Call) RunAndReturn(run func() error) *KV_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *KV) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KV_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type KV_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *KV_Expecter) Get(key interface{}) *KV_Get_Call {
	return &KV_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *KV_Get_Call) Run(run func(key []byte)) *KV_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *KV_Get_Call) Return(_a0 []byte, _a1 error) *KV_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KV_Get_Call) RunAndReturn(run func([]byte) ([]byte, error)) *KV_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Iterator provides a mock function with given fields: ctx
func (_m *KV) Iterator(ctx context.Context) (domain.KvIterator, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Iterator")
	}

	var r0 domain.KvIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.KvIterator, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.KvIterator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.KvIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KV_Iterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iterator'
type KV_Iterator_Call struct {
	*mock.Call
}

// Iterator is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KV_Expecter) Iterator(ctx interface{}) *KV_Iterator_Call {
	return &KV_Iterator_Call{Call: _e.mock.On("Iterator", ctx)}
}

func (_c *KV_Iterator_Call) Run(run func(ctx context.Context)) *KV_Iterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *KV_Iterator_Call) Return(_a0 domain.KvIterator, _a1 error) *KV_Iterator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KV_Iterator_Call) RunAndReturn(run func(context.Context) (domain.KvIterator, error)) *KV_Iterator_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, value
func (_m *KV) Put(key []byte, value []byte) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KV_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type KV_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key []byte
//   - value []byte
func (_e *KV_Expecter) Put(key interface{}, value interface{}) *KV_Put_Call {
	return &KV_Put_Call{Call: _e.mock.On("Put", key, value)}
}

func (_c *KV_Put_Call) Run(run func(key []byte, value []byte)) *KV_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *KV_Put_Call) Return(_a0 error) *KV_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KV_Put_Call) RunAndReturn(run func([]byte, []byte) error) *KV_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewKV creates a new instance of KV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKV(t interface {
	mock.TestingT
	Cleanup(func())
}) *KV {
	mock := &KV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
