// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/go-pkg/domain"
)

// MessageBroker is an autogenerated mock type for the MessageBroker type
type MessageBroker struct {
	mock.Mock
}

type MessageBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageBroker) EXPECT() *MessageBroker_Expecter {
	return &MessageBroker_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MessageBroker) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageBroker_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MessageBroker_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MessageBroker_Expecter) Close() *MessageBroker_Close_Call {
	return &MessageBroker_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MessageBroker_Close_Call) Run(run func()) *MessageBroker_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageBroker_Close_Call) Return(_a0 error) *MessageBroker_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageBroker_Close_Call) RunAndReturn(run func() error) *MessageBroker_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: _a0, _a1, _a2
func (_m *MessageBroker) Publish(_a0 context.Context, _a1 string, _a2 []byte) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageBroker_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MessageBroker_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 []byte
func (_e *MessageBroker_Expecter) Publish(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MessageBroker_Publish_Call {
	return &MessageBroker_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1, _a2)}
}

func (_c *MessageBroker_Publish_Call) Run(run func(_a0 context.Context, _a1 string, _a2 []byte)) *MessageBroker_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MessageBroker_Publish_Call) Return(_a0 error) *MessageBroker_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageBroker_Publish_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MessageBroker_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// RequestResponse provides a mock function with given fields: _a0, _a1
func (_m *MessageBroker) RequestResponse(_a0 context.Context, _a1 domain.Envelope) (domain.Envelope, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RequestResponse")
	}

	var r0 domain.Envelope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Envelope) (domain.Envelope, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Envelope) domain.Envelope); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Envelope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Envelope) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageBroker_RequestResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestResponse'
type MessageBroker_RequestResponse_Call struct {
	*mock.Call
}

// RequestResponse is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Envelope
func (_e *MessageBroker_Expecter) RequestResponse(_a0 interface{}, _a1 interface{}) *MessageBroker_RequestResponse_Call {
	return &MessageBroker_RequestResponse_Call{Call: _e.mock.On("RequestResponse", _a0, _a1)}
}

func (_c *MessageBroker_RequestResponse_Call) Run(run func(_a0 context.Context, _a1 domain.Envelope)) *MessageBroker_RequestResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Envelope))
	})
	return _c
}

func (_c *MessageBroker_RequestResponse_Call) Return(_a0 domain.Envelope, _a1 error) *MessageBroker_RequestResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageBroker_RequestResponse_Call) RunAndReturn(run func(context.Context, domain.Envelope) (domain.Envelope, error)) *MessageBroker_RequestResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *MessageBroker) Subscribe(_a0 context.Context, _a1 string) (<-chan domain.Envelope, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan domain.Envelope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan domain.Envelope, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan domain.Envelope); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan domain.Envelope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageBroker_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MessageBroker_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MessageBroker_Expecter) Subscribe(_a0 interface{}, _a1 interface{}) *MessageBroker_Subscribe_Call {
	return &MessageBroker_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0, _a1)}
}

func (_c *MessageBroker_Subscribe_Call) Run(run func(_a0 context.Context, _a1 string)) *MessageBroker_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MessageBroker_Subscribe_Call) Return(_a0 <-chan domain.Envelope, _a1 error) *MessageBroker_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageBroker_Subscribe_Call) RunAndReturn(run func(context.Context, string) (<-chan domain.Envelope, error)) *MessageBroker_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageBroker creates a new instance of MessageBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageBroker {
	mock := &MessageBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
