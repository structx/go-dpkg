// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/dht/dht_service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DHTServiceClient is the client API for DHTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHTServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeResponse, error)
	FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueResponse, error)
}

type dHTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDHTServiceClient(cc grpc.ClientConnInterface) DHTServiceClient {
	return &dHTServiceClient{cc}
}

func (c *dHTServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dht.v1.DHTService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTServiceClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/dht.v1.DHTService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTServiceClient) FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeResponse, error) {
	out := new(FindNodeResponse)
	err := c.cc.Invoke(ctx, "/dht.v1.DHTService/FindNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTServiceClient) FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueResponse, error) {
	out := new(FindValueResponse)
	err := c.cc.Invoke(ctx, "/dht.v1.DHTService/FindValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHTServiceServer is the server API for DHTService service.
// All implementations must embed UnimplementedDHTServiceServer
// for forward compatibility
type DHTServiceServer interface {
	Ping(context.Context, *PingRequest) (*empty.Empty, error)
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	FindNode(context.Context, *FindNodeRequest) (*FindNodeResponse, error)
	FindValue(context.Context, *FindValueRequest) (*FindValueResponse, error)
	mustEmbedUnimplementedDHTServiceServer()
}

// UnimplementedDHTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDHTServiceServer struct {
}

func (UnimplementedDHTServiceServer) Ping(context.Context, *PingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDHTServiceServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedDHTServiceServer) FindNode(context.Context, *FindNodeRequest) (*FindNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedDHTServiceServer) FindValue(context.Context, *FindValueRequest) (*FindValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindValue not implemented")
}
func (UnimplementedDHTServiceServer) mustEmbedUnimplementedDHTServiceServer() {}

// UnsafeDHTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHTServiceServer will
// result in compilation errors.
type UnsafeDHTServiceServer interface {
	mustEmbedUnimplementedDHTServiceServer()
}

func RegisterDHTServiceServer(s grpc.ServiceRegistrar, srv DHTServiceServer) {
	s.RegisterService(&DHTService_ServiceDesc, srv)
}

func _DHTService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.v1.DHTService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.v1.DHTService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServiceServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTService_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServiceServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.v1.DHTService/FindNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServiceServer).FindNode(ctx, req.(*FindNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHTService_FindValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServiceServer).FindValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dht.v1.DHTService/FindValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServiceServer).FindValue(ctx, req.(*FindValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DHTService_ServiceDesc is the grpc.ServiceDesc for DHTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dht.v1.DHTService",
	HandlerType: (*DHTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DHTService_Ping_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _DHTService_Store_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _DHTService_FindNode_Handler,
		},
		{
			MethodName: "FindValue",
			Handler:    _DHTService_FindValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dht/dht_service.proto",
}
